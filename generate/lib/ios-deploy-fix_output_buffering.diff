diff --git a/src/scripts/lldb.py b/src/scripts/lldb.py
index 89feffb..c8d253b 100644
--- a/src/scripts/lldb.py
+++ b/src/scripts/lldb.py
@@ -112,8 +112,10 @@ def autoexit_command(debugger, command, result, internal_dict):
         while stdout:
             if out:
                 out.write(stdout)
+                out.flush()
             else:
                 sys.stdout.write(stdout)
+                sys.stdout.flush()
             stdout = process.GetSTDOUT(1024)
 
     def ProcessSTDERR():
@@ -121,8 +123,10 @@ def autoexit_command(debugger, command, result, internal_dict):
         while stderr:
             if err:
                 err.write(stderr)
+                err.flush()
             else:
                 sys.stdout.write(stderr)
+                sys.stdout.flush()
             stderr = process.GetSTDERR(1024)
 
     def CloseOut():
@@ -153,25 +157,30 @@ def autoexit_command(debugger, command, result, internal_dict):
 
         if state == lldb.eStateExited:
             sys.stdout.write( '\\nPROCESS_EXITED\\n' )
+            sys.stdout.flush()
             CloseOut()
             os._exit(process.GetExitStatus())
         elif printBacktraceTime is None and state == lldb.eStateStopped:
             sys.stdout.write( '\\nPROCESS_STOPPED\\n' )
+            sys.stdout.flush()
             debugger.HandleCommand('bt')
             CloseOut()
             os._exit({exitcode_app_crash})
         elif state == lldb.eStateCrashed:
             sys.stdout.write( '\\nPROCESS_CRASHED\\n' )
+            sys.stdout.flush()
             debugger.HandleCommand('bt')
             CloseOut()
             os._exit({exitcode_app_crash})
         elif state == lldb.eStateDetached:
             sys.stdout.write( '\\nPROCESS_DETACHED\\n' )
+            sys.stdout.flush()
             CloseOut()
             os._exit({exitcode_app_crash})
         elif printBacktraceTime is not None and time.time() >= printBacktraceTime:
             printBacktraceTime = None
             sys.stdout.write( '\\nPRINT_BACKTRACE_TIMEOUT\\n' )
+            sys.stdout.flush()
             debugger.HandleCommand('process interrupt')
             debugger.HandleCommand('bt all')
             debugger.HandleCommand('continue')
